# main.py
# –ö—É—Ä—Å: ¬´–í–≤–µ–¥–µ–Ω–∏–µ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º: Telegram-–±–æ—Ç —Å –Ω—É–ª—è¬ª
# –°—Ç–µ–∫: Python 3.11, pyTelegramBotAPI (TeleBot), long polling, .env (python-dotenv)
# –í —ç—Ç–æ–º —Ñ–∞–π–ª–µ: –±–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã, reply/inline-–∫–Ω–æ–ø–∫–∏, –∏ –ø–æ–≥–æ–¥–∞ –ø–æ –ú–æ—Å–∫–≤–µ —á–µ—Ä–µ–∑ Open‚ÄëMeteo (–±–µ–∑ –∫–ª—é—á–∞).

from __future__ import annotations

import os
import logging
import json
from typing import List, Optional, Dict
from urllib.request import urlopen
from urllib.parse import urlencode
from urllib.error import URLError, HTTPError

from dotenv import load_dotenv
import telebot
from telebot import types

# ---------------------------------------------------------------------
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
# ---------------------------------------------------------------------

# 1) –¢–æ–∫–µ–Ω ‚Äî –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä —á–∏—Ç–∞–µ–º –∏–∑ .env (TOKEN –Ω–µ –∫–æ–º–º–∏—Ç–∏–º) ‚Äî —Å–º. –ø—Ä–∞–∫—Ç–∏–∫—É –∫—É—Ä—Å–∞.
#    (.env –¥–æ–ª–∂–µ–Ω –ª–µ–∂–∞—Ç—å –≤ .gitignore, –∞ –ø—Ä–∏–º–µ—Ä .env.example ‚Äî –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏)
#    –ü–æ–¥—Ä–æ–±–Ω–µ–µ ‚Äî –Ω–∞ —Å–ª–∞–π–¥–∞—Ö S1/L1. 
#    TOKEN=123456:ABC-DEF... (–ø–æ–ª—É—á–∏—Ç—å —É @BotFather)
load_dotenv()
TOKEN = os.getenv("TOKEN")

if not TOKEN:
    raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω TOKEN –≤ .env. –ü—Ä–æ–≤–µ—Ä—å —Ñ–∞–π–ª .env –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é TOKEN.")

# 2) –õ–æ–≥–∏ ‚Äî –ø–æ–º–æ–≥—É—Ç –Ω–∞ —Å–µ–º–∏–Ω–∞—Ä–∞—Ö –∏ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –æ—à–∏–±–æ–∫
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s [%(name)s] %(message)s",
)
logger = logging.getLogger("tg-bot")

# 3) –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º TeleBot —Å HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π
bot = telebot.TeleBot(TOKEN, parse_mode="HTML")


# ---------------------------------------------------------------------
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# ---------------------------------------------------------------------

def make_main_menu() -> types.ReplyKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (Reply Keyboard)."""
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    kb.add(
        types.KeyboardButton("‚òÄÔ∏è –ü–æ–≥–æ–¥–∞ –ú–æ—Å–∫–≤–∞"),
        types.KeyboardButton("‚ûï –°–ª–æ–∂–∏—Ç—å —á–∏—Å–ª–∞"),
    )
    kb.add(
        types.KeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ"),
        types.KeyboardButton("üìå –ü–æ–º–æ—â—å"),
    )
    return kb


def make_like_inline() -> types.InlineKeyboardMarkup:
    """–ü—Ä–∏–º–µ—Ä inline-–∫–Ω–æ–ø–æ–∫ (callback)."""
    ikb = types.InlineKeyboardMarkup()
    ikb.add(
        types.InlineKeyboardButton("üëç –ù—Ä–∞–≤–∏—Ç—Å—è", callback_data="like"),
        types.InlineKeyboardButton("üëé –ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è", callback_data="dislike"),
    )
    return ikb


# ---------------------------------------------------------------------
# –£—Ç–∏–ª–∏—Ç—ã
# ---------------------------------------------------------------------

def numbers_from_text(text: str) -> List[int]:
    """
    –î–æ—Å—Ç–∞—ë—Ç —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∑–Ω–∞–∫–∏ +/-, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—á–∏–µ —Ç–æ–∫–µ–Ω—ã.
    –ü—Ä–∏–º–µ—Ä—ã: "2 3 10" -> [2, 3, 10], "/sum -5 x 7" -> [-5, 7]
    """
    nums: List[int] = []
    for token in text.split():
        t = token.strip()
        # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∞–º—É –∫–æ–º–∞–Ω–¥—É (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–æ '/')
        if t.startswith("/"):
            continue
        # –ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ü–µ–ª–æ–µ —Å–æ –∑–Ω–∞–∫–æ–º
        if t.startswith(("+", "-")):
            body = t[1:]
        else:
            body = t
        if body.isdigit():
            try:
                nums.append(int(t))
            except ValueError:
                # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π ‚Äî –Ω–æ —Å—é–¥–∞ –Ω–µ –∑–∞–π–¥—ë–º –ø—Ä–∏ —Ç–µ–∫—É—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–µ
                pass
    return nums


# ---------------------------------------------------------------------
# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: –ü–æ–≥–æ–¥–∞ (Open‚ÄëMeteo, –±–µ–∑ API-–∫–ª—é—á–∞)
# ---------------------------------------------------------------------

MOSCOW_COORDS = (55.7558, 37.6176)

OPEN_METEO_CODES: Dict[int, str] = {
    # –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø–æ–≥–æ–¥–Ω—ã—Ö –∫–æ–¥–æ–≤ Open‚ÄëMeteo (—Å–æ–∫—Ä–∞—â—ë–Ω)
    0: "–Ø—Å–Ω–æ",
    1: "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ —è—Å–Ω–æ",
    2: "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å",
    3: "–ü–∞—Å–º—É—Ä–Ω–æ",
    45: "–¢—É–º–∞–Ω",
    48: "–û—Å–µ–¥–∞—é—â–∏–π —Ç—É–º–∞–Ω",
    51: "–ú–µ–ª–∫–∞—è –º–æ—Ä–æ—Å—å", 53: "–ú–æ—Ä–æ—Å—å", 55: "–°–∏–ª—å–Ω–∞—è –º–æ—Ä–æ—Å—å",
    56: "–õ–µ–¥—è–Ω–∞—è –º–æ—Ä–æ—Å—å", 57: "–°–∏–ª—å–Ω–∞—è –ª–µ–¥—è–Ω–∞—è –º–æ—Ä–æ—Å—å",
    61: "–°–ª–∞–±—ã–π –¥–æ–∂–¥—å", 63: "–î–æ–∂–¥—å", 65: "–õ–∏–≤–µ–Ω—å",
    66: "–õ–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å", 67: "–°–∏–ª—å–Ω—ã–π –ª–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å",
    71: "–°–ª–∞–±—ã–π —Å–Ω–µ–≥", 73: "–°–Ω–µ–≥", 75: "–°–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥",
    77: "–°–Ω–µ–∂–Ω—ã–µ –∑—ë—Ä–Ω–∞",
    80: "–ö—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å (—Å–ª–∞–±.)",
    81: "–ö—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å",
    82: "–õ–∏–≤–Ω–µ–≤—ã–π –¥–æ–∂–¥—å (—Å–∏–ª—å–Ω.)",
    85: "–ö—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–Ω–µ–≥ (—Å–ª–∞–±.)",
    86: "–ö—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–Ω–µ–≥ (—Å–∏–ª—å–Ω.)",
    95: "–ì—Ä–æ–∑–∞",
    96: "–ì—Ä–æ–∑–∞ —Å –≥—Ä–∞–¥–æ–º (—Å–ª–∞–±.)",
    99: "–ì—Ä–æ–∑–∞ —Å –≥—Ä–∞–¥–æ–º (—Å–∏–ª—å–Ω.)",
}

def fetch_moscow_weather() -> Optional[str]:
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –ø–æ –ú–æ—Å–∫–≤–µ —É Open‚ÄëMete–æ (–±–µ–∑ –∫–ª—é—á–∞).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ.
    """
    lat, lon = MOSCOW_COORDS
    params = {
        "latitude": f"{lat:.4f}",
        "longitude": f"{lon:.4f}",
        "current": "temperature_2m,weather_code,wind_speed_10m",
        "timezone": "Europe/Moscow",
    }
    url = f"https://api.open-meteo.com/v1/forecast?{urlencode(params)}"

    try:
        with urlopen(url, timeout=6) as resp:
            data = json.load(resp)
    except HTTPError as e:
        logger.warning("Open-Meteo HTTPError: %s", e)
        return None
    except URLError as e:
        logger.warning("Open-Meteo URLError: %s", e)
        return None
    except Exception as e:
        logger.exception("Open-Meteo unknown error: %s", e)
        return None

    # –ü–∞—Ä—Å–∏–º "current"
    current: dict = data.get("current", {})
    if not current:
        return None

    t = current.get("temperature_2m")
    wcode = int(current.get("weather_code", -1))
    wind = current.get("wind_speed_10m")
    time_iso = current.get("time")

    desc = OPEN_METEO_CODES.get(wcode, f"–ö–æ–¥ –ø–æ–≥–æ–¥—ã {wcode}")
    # –ù–∞—Ä–∏—Å—É–µ–º –Ω–µ–±–æ–ª—å—à–æ–π —ç–º–æ–¥–∑–∏ –ø–æ —Ç–∏–ø—É –ø–æ–≥–æ–¥—ã (–æ—á–µ–Ω—å —É–ø—Ä–æ—â—ë–Ω–Ω–æ)
    icon = "‚òÄÔ∏è" if wcode in (0, 1) else "‚õÖ" if wcode in (2,) else "‚òÅÔ∏è" if wcode in (3, 45, 48) else "üåßÔ∏è" if wcode in (51, 53, 55, 61, 63, 65, 80, 81, 82) else "‚ùÑÔ∏è" if wcode in (71, 73, 75, 77, 85, 86) else "‚õàÔ∏è" if wcode in (95, 96, 99) else "üå°Ô∏è"

    # –ß–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –≤—Ä–µ–º—è
    when = time_iso.replace("T", " ") if isinstance(time_iso, str) else "‚Äî"

    return (
        f"{icon} <b>–ü–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ (—Å–µ–π—á–∞—Å)</b>\n"
        f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: <b>{t}¬∞C</b>\n"
        f"–°–æ—Å—Ç–æ—è–Ω–∏–µ: <b>{desc}</b>\n"
        f"–í–µ—Ç–µ—Ä: <b>{wind} –º/—Å</b>\n"
        f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: {when} (Europe/Moscow)"
    )


# ---------------------------------------------------------------------
# –•—ç–Ω–¥–ª–µ—Ä—ã –∫–æ–º–∞–Ω–¥
# ---------------------------------------------------------------------

@bot.message_handler(commands=["start"])
def cmd_start(message: types.Message) -> None:
    logger.info("/start from %s", message.from_user.id if message.from_user else "unknown")
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –Ø —É—á–µ–±–Ω—ã–π –±–æ—Ç.\n"
        "–ù–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ —Å–º–æ—Ç—Ä–∏ /help.",
        reply_markup=make_main_menu(),
    )


@bot.message_handler(commands=["help"])
def cmd_help(message: types.Message) -> None:
    logger.info("/help from %s", message.from_user.id if message.from_user else "unknown")
    help_text = (
        "<b>–ö–æ–º–∞–Ω–¥—ã</b>\n"
        "/start ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help ‚Äî –ø–æ–º–æ—â—å\n"
        "/about ‚Äî –æ –±–æ—Ç–µ\n"
        "/sum 2 3 10 ‚Äî —Å—É–º–º–∞ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª\n"
        "/echo —Ç–µ–∫—Å—Ç ‚Äî –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–µ–∫—Å—Ç\n"
        "/buttons ‚Äî –ø—Ä–∏–º–µ—Ä inline‚Äë–∫–Ω–æ–ø–æ–∫\n"
        "/max ‚Äî <i>–∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –¥–æ–º</i> (—Å–º. –æ–ø–∏—Å–∞–Ω–∏–µ –≤ –æ—Ç–≤–µ—Ç–µ)\n\n"
        "–ò–ª–∏ –ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –≤–Ω–∏–∑—É —á–∞—Ç–∞."
    )
    bot.send_message(message.chat.id, help_text, reply_markup=make_main_menu())


@bot.message_handler(commands=["about"])
def cmd_about(message: types.Message) -> None:
    # –ü—Ä–æ—Å—Ç–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ ‚Äî –±—ã–ª–∞ –≤ S2
    bot.reply_to(
        message,
        "–Ø —É—á–µ–±–Ω—ã–π –±–æ—Ç –∫—É—Ä—Å–∞: /start, /help, /sum, /echo, /buttons, /max (–î–ó).",
    )


@bot.message_handler(commands=["echo"])
def cmd_echo(message: types.Message) -> None:
    # –ü—Ä–∏–º–µ—Ä: —Ä–∞–∑–±–æ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Ä–∞–∑–±–æ—Ä—É /sum –≤ S2)
    parts = message.text.split(maxsplit=1)
    arg = parts[1] if len(parts) > 1 else ""
    if not arg:
        bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /echo —Ç–µ–∫—Å—Ç")
    else:
        bot.reply_to(message, arg)


@bot.message_handler(commands=["sum"])
def cmd_sum(message: types.Message) -> None:
    """
    –°—É–º–º–∏—Ä—É–µ—Ç —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.
    –ü—Ä–∏–º–µ—Ä: /sum 2 3 10...-> –°—É–º–º–∞: 15
    """
    nums = numbers_from_text(message.text)
    if not nums:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —á–∏—Å–ª–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ (–¥–µ–º–æ register_next_step_handler)
        msg = bot.reply_to(message, "–ü—Ä–∏—à–ª–∏ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2 3 10):")
        bot.register_next_step_handler(msg, _sum_next_step)
    else:
        bot.reply_to(message, f"–°—É–º–º–∞: <b>{sum(nums)}</b>")


def _sum_next_step(message: types.Message) -> None:
    nums = numbers_from_text(message.text or "")
    if not nums:
        bot.reply_to(message, "–ù–µ –Ω–∞—à—ë–ª —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª. –ü–æ–≤—Ç–æ—Ä–∏ –µ—â—ë —Ä–∞–∑: –ø—Ä–∏–º–µ—Ä—ã ‚Äî 2 3 10 –∏–ª–∏ -5 7")
        return
    bot.reply_to(message, f"–°—É–º–º–∞: <b>{sum(nums)}</b>", reply_markup=make_main_menu())


@bot.message_handler(commands=["max"])
def cmd_max_stub(message: types.Message) -> None:
    """
    –ó–∞–≥–ª—É—à–∫–∞ –ø–æ–¥ –î–ó: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /max ‚Äî –≤—ã–≤–µ—Å—Ç–∏ –º–∞–∫—Å–∏–º—É–º –∏–∑ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª.
    –û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ (–ø—Ä–∏–º–µ—Ä): /max 2 5 3...-> –ú–∞–∫—Å–∏–º—É–º: 5
    """
    bot.reply_to(
        message,
        "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ ‚Äî <b>–∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –¥–æ–º</b>.\n"
        "–°–¥–µ–ª–∞–π —Ä–∞–∑–±–æ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏ —Å /sum –∏ –≤—ã–≤–µ–¥–∏ –º–∞–∫—Å–∏–º—É–º.\n"
        "–ü—Ä–∏–º–µ—Ä: <code>/max 2 5 3</code> ‚Üí <b>–ú–∞–∫—Å–∏–º—É–º: 5</b>",
    )


@bot.message_handler(commands=["buttons"])
def cmd_buttons_demo(message: types.Message) -> None:
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è inline‚Äë–∫–Ω–æ–ø–æ–∫ —Å callback_data.
    """
    bot.send_message(
        message.chat.id,
        "–ù—Ä–∞–≤–∏—Ç—Å—è –ª–∏ —Ç–µ–±–µ —ç—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä –∫–Ω–æ–ø–æ–∫?",
        reply_markup=make_like_inline(),
    )


@bot.callback_query_handler(func=lambda call: call.data in {"like", "dislike"})
def on_callback_like(call: types.CallbackQuery) -> None:
    if call.data == "like":
        bot.answer_callback_query(call.id, "–°–ø–∞—Å–∏–±–æ! üëç")
        bot.edit_message_text("–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏: üëç –ù—Ä–∞–≤–∏—Ç—Å—è", call.message.chat.id, call.message.message_id)
    else:
        bot.answer_callback_query(call.id, "–ü–æ–Ω—è–ª! üëé")
        bot.edit_message_text("–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏: üëé –ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è", call.message.chat.id, call.message.message_id)


# ---------------------------------------------------------------------
# –•—ç–Ω–¥–ª–µ—Ä—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é (Reply Keyboard)
# ---------------------------------------------------------------------

@bot.message_handler(func=lambda m: (m.text or "").strip().lower() in {"‚ÑπÔ∏è –æ –±–æ—Ç–µ", "–æ –±–æ—Ç–µ"})
def on_about_button(message: types.Message) -> None:
    cmd_about(message)


@bot.message_handler(func=lambda m: (m.text or "").strip().lower() in {"üìå –ø–æ–º–æ—â—å", "–ø–æ–º–æ—â—å"})
def on_help_button(message: types.Message) -> None:
    cmd_help(message)


@bot.message_handler(func=lambda m: (m.text or "").strip().lower() in {"‚òÄÔ∏è –ø–æ–≥–æ–¥–∞ –º–æ—Å–∫–≤–∞", "–ø–æ–≥–æ–¥–∞ –º–æ—Å–∫–≤–∞"})
def on_weather_button(message: types.Message) -> None:
    text = fetch_moscow_weather()
    if text is None:
        bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.")
        return
    bot.send_message(message.chat.id, text)


@bot.message_handler(func=lambda m: (m.text or "").strip().lower() in {"‚ûï —Å–ª–æ–∂–∏—Ç—å —á–∏—Å–ª–∞", "—Å–ª–æ–∂–∏—Ç—å —á–∏—Å–ª–∞"})
def on_sum_button(message: types.Message) -> None:
    # –¢–∞–∫–æ–π –∂–µ —Å—Ü–µ–Ω–∞—Ä–∏–π, –∫–∞–∫ –≤ /sum –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    msg = bot.reply_to(message, "–ü—Ä–∏—à–ª–∏ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2 3 10):")
    bot.register_next_step_handler(msg, _sum_next_step)


# ---------------------------------------------------------------------
# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ (Long Polling)
# ---------------------------------------------------------------------

if __name__ == "__main__":
    logger.info("Bot is starting (long polling)...")
    # skip_pending=True ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º ¬´–∑–∞–ª–µ–∂–∞–≤—à–∏–µ—Å—è¬ª –∞–ø–¥–µ–π—Ç—ã, –∫–∞–∫ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –Ω–∞ —Å–µ–º–∏–Ω–∞—Ä–∞—Ö
    bot.infinity_polling(skip_pending=True, timeout=20)